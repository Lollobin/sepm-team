openapi: 3.0.0
info:
  title: Ticketline API
  description: Documentation for the Ticketline API
  version: 0.0.1
servers:
  - url: localhost:8080
    description: Can be used when spring application is started locally
paths:
  /login:
    post:
      tags:
        - auth
      summary: Retrieves an authentication token.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthRequest"
      responses:
        200:
          description: Returns the JWT token on success
          content:
            text/plain:
              schema:
                type: string
        401:
          $ref: "#/components/responses/401-not-authenticated"
        500:
          $ref: "#/components/responses/500-internal-error"
  /passwordReset/{id}:
    post:
      tags:
        - userManagement
      summary: Resets a password for a user with the given ID. Only allowed for the own user or if you are an administrator.
      security:
        - BearerAuth: []
      parameters:
        - $ref: "#/components/parameters/userId"
      responses:
        200:
          description: Successful reset of the password. An email will be sent soon.
        401:
          $ref: "#/components/responses/401-not-authenticated"
        403:
          $ref: "#/components/responses/403-forbidden"
        500:
          $ref: "#/components/responses/500-internal-error"
  /passwordReset:
    post:
      tags:
        - userManagement
      summary: Resets a password for a user with the email in the body.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PasswordReset"
        
      responses:
        200:
          description: OK
          content:
            text/plain:
              schema:
                type: string
        401:
          $ref: "#/components/responses/401-not-authenticated"
        403:
          $ref: "#/components/responses/403-forbidden"
        500:
          $ref: "#/components/responses/500-internal-error"

  /passwordUpdate:
    post:
      tags:
        - userManagement
      summary: Updates account with unique token, sets the password 
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PasswordUpdate"
      responses:
        204:
          description: Successful update of password
        401:
          $ref: "#/components/responses/401-not-authenticated"
        403:
          $ref: "#/components/responses/403-forbidden"
        500:
          $ref: "#/components/responses/500-internal-error"
  /seatingPlanLayouts:
    post:
      tags:
        - seatingPlans
      summary: Uploads a seating plan layout.
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          # Change to correct schema
          application/json:
            schema:
              type: string
              format: binary
      responses:
        201:
          description: Successful upload of a seating plan layout.
          headers:
            Location:
              required: true
              description: The location of the created resource
              schema:
                type: string
                format: uri
        422:
          description: Validation failed for an input
        500:
          $ref: "#/components/responses/500-internal-error"
  /seatingPlanLayouts/{id}:
    get:
      tags:
        - seatingPlans
      summary: Retreives seating plan layout with the given ID
      security:
        - BearerAuth: []
      parameters:
        - $ref: "#/components/parameters/seatingPlanLayoutId"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SeatingPlanLayout"
        404:
          description: The seating plan layout with the given ID was not found
  /images:
    post:
      tags:
        - articles
      summary: Uploads an image.
      security:
        - BearerAuth: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                fileName:
                  type: string
                  format: binary
      responses:
        201:
          description: Successful upload of an image.
          headers:
            Location:
              required: true
              description: The location of the created resource
              schema:
                type: string
                format: uri
        422:
          description: Validation failed for an input
        500:
          $ref: "#/components/responses/500-internal-error"
  /images/{id}:
    get:
      tags:
        - articles
      summary: Retreives an article image with the given ID
      security:
        - BearerAuth: []
      parameters:
        - $ref: "#/components/parameters/imageId"
      responses:
        200:
          description: OK
          content:
            image/*:
              schema:
                type: string
                format: binary
        404:
          description: The image with the given ID was not found
  /users:
    get:
      tags:
        - userManagement
      summary: Gets a list of users
      security:
        - BearerAuth: []
      parameters:
        - $ref: "#/components/parameters/filterLocked"
        - in: query
          name: pageSize
          description: Number of items on requested page
          schema:
            type: integer
            default: 10
        - in: query
          name: requestedPage
          description: Index of requested page (starts with 0)
          schema:
            type: integer
            default: 0
        - in: query
          name: sort
          schema:
            type: string
            enum:
              - ASC
              - DESC
            default: ASC

      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UsersPage"
    post:
      tags:
        - userManagement
      summary: Registers an user with the given data.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserWithPassword"
      responses:
        201:
          description: Successful creation of an user
          headers:
            Location:
              required: true
              description: The location of the created resource
              schema:
                type: string
                format: uri
        422:
          description: Validation failed for an input
        500:
          $ref: "#/components/responses/500-internal-error"
    put:
      tags:
        - userManagement
      summary: Updates information of a user possesing the token.
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserWithPassword"
      responses:
        204:
          description: Successful update of an user.
        401:
          $ref: "#/components/responses/401-not-authenticated"
        422:
          description: Validation failed for an input
        500:
          $ref: "#/components/responses/500-internal-error"
  /userInfo:
    get:
      tags:
        - userManagement
      summary: Gets user info of user possesing the token.
      security:
        - BearerAuth: []
      responses:
        200:
          description: Successful retreival of user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        401:
          $ref: "#/components/responses/401-not-authenticated"
        404:
          description: The user with the given ID was not found
        500:
          $ref: "#/components/responses/500-internal-error"
  /users/{id}:
    get:
      tags:
        - userManagement
      summary: Retreives information of an user with the given data.
      parameters:
        - $ref: "#/components/parameters/userId"
      security:
        - BearerAuth: []
      responses:
        200:
          description: Successful retreival of an user.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        401:
          $ref: "#/components/responses/401-not-authenticated"
        404:
          description: The user with the given ID was not found
        500:
          $ref: "#/components/responses/500-internal-error"
    delete:
      tags:
        - userManagement
      summary: Deletes the user with the given ID.
      description: Only an administrator or the user itself can delete a given user account.
      parameters:
        - $ref: "#/components/parameters/userId"
      security:
        - BearerAuth: []
      responses:
        204:
          description: Successful deletion of an user.
        401:
          $ref: "#/components/responses/401-not-authenticated"
        403:
          $ref: "#/components/responses/403-forbidden"
        404:
          description: The user with the given ID was not found
        500:
          $ref: "#/components/responses/500-internal-error"
  /administrativeUsers:
    post:
      tags:
        - userManagement
      summary: Registers an user with administrative rights with the given data.
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserWithPassword"
      responses:
        201:
          description: Successful creation of an administrative user. Location header points to normal /user/{id} endpoint.
          headers:
            Location:
              required: true
              description: The location of the created resource
              schema:
                type: string
                format: uri
        401:
          $ref: "#/components/responses/401-not-authenticated"
        403:
          $ref: "#/components/responses/403-forbidden"
        422:
          description: Validation failed for an input
        500:
          $ref: "#/components/responses/500-internal-error"
  /lockStatus/{id}:
    put:
      tags:
        - userManagement
      summary: Locks the user-account with the given ID.
      parameters:
        - $ref: "#/components/parameters/userId"
      security:
        - BearerAuth: []
      requestBody:
        description: Send boolean value for locking/unlocking
        required: true
        content:
          application/json:
            schema:
              type: boolean
      responses:
        200:
          description: Successful update of the lock status of an user.
        401:
          $ref: "#/components/responses/401-not-authenticated"
        403:
          $ref: "#/components/responses/403-forbidden"
        500:
          $ref: "#/components/responses/500-internal-error"
  /articles:
    post:
      tags:
        - articles
      summary: Creates a news article
      description: Only admins can create new news articles
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ArticleWithoutId"
      responses:
        201:
          description: Successful creation of an article
          headers:
            Location:
              required: true
              description: The location of the created resource
              schema:
                type: string
                format: uri
        401:
          $ref: "#/components/responses/401-not-authenticated"
        403:
          $ref: "#/components/responses/403-forbidden"
        422:
          description: Validation failed for an input
        500:
          $ref: "#/components/responses/500-internal-error"
    get:
      tags:
        - articles
      summary: Gets news articles
      security:
        - BearerAuth: []
      parameters:
        - $ref: "#/components/parameters/filterRead"
      responses:
        200:
          description: Successful retreival of articles
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Article"
        401:
          $ref: "#/components/responses/401-not-authenticated"
        500:
          $ref: "#/components/responses/500-internal-error"
  /articles/{id}:
    get:
      tags:
        - articles
      summary: Gets the details of a news article
      parameters:
        - $ref: "#/components/parameters/articleId"
      security:
        - BearerAuth: []
      responses:
        200:
          description: Successful retreival of the article
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Article"
        401:
          $ref: "#/components/responses/401-not-authenticated"
        404:
          description: The article with the given ID was not found
        500:
          $ref: "#/components/responses/500-internal-error"
  /readArticleStatus/{id}:
    put:
      tags:
        - articles
      summary: Sets the status to read or unread for an article for the current user
      security:
        - BearerAuth: []
      parameters:
        - $ref: "#/components/parameters/articleId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: boolean
      responses:
        200:
          description: Successful set the "read"-status of an article for an user
        401:
          $ref: "#/components/responses/401-not-authenticated"
        500:
          $ref: "#/components/responses/500-internal-error"
  /events:
    post:
      tags:
        - events
      summary: Creates an event
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EventWithoutId"
      responses:
        201:
          description: Successful creation of an event
          headers:
            Location:
              required: true
              description: The location of the created resource
              schema:
                type: string
                format: uri
        401:
          $ref: "#/components/responses/401-not-authenticated"
        403:
          $ref: "#/components/responses/403-forbidden"
        422:
          description: Validation failed for an input
        500:
          $ref: "#/components/responses/500-internal-error"
    get:
      tags:
        - events
      summary: Searches for events depending on parameters
      description: Filters data depending on the query parameters. When no query parameters are given, all events are returned
      parameters:
        - name: search
          in: query
          schema:
            $ref: "#/components/schemas/EventSearch"
        - in: query
          name: pageSize
          description: Number of items on requested page
          schema:
            type: integer
            default: 10
        - in: query
          name: requestedPage
          description: Index of requested page (starts with 0)
          schema:
            type: integer
            default: 0
        - in: query
          name: sort
          schema:
            $ref: "#/components/schemas/Sort"

      responses:
        200:
          description: Successful retreival of articles
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EventSearchResult"
        500:
          $ref: "#/components/responses/500-internal-error"
  /events/{id}:
    get:
      tags:
        - events
      summary: Gets the details of an event
      parameters:
        - $ref: "#/components/parameters/eventId"
      security:
        - BearerAuth: []
      responses:
        200:
          description: Successful retreival of the event
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Event"
        401:
          $ref: "#/components/responses/401-not-authenticated"
        404:
          description: The article with the given ID was not found
        500:
          $ref: "#/components/responses/500-internal-error"
  /shows:
    post:
      tags:
        - shows
      summary: Creates a show
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ShowWithoutId"
      responses:
        201:
          description: Successful creation of a show
          headers:
            Location:
              required: true
              description: The location of the created resource
              schema:
                type: string
                format: uri
        401:
          $ref: "#/components/responses/401-not-authenticated"
        403:
          $ref: "#/components/responses/403-forbidden"
        422:
          description: Validation failed for an input
        500:
          $ref: "#/components/responses/500-internal-error"
    get:
      tags:
        - shows
      summary: Searches for shows depending on parameters
      description: Filters data depending on the query parameters. When no query parameters are given, all shows are returned
      parameters:
        - name: search
          in: query
          schema:
            $ref: "#/components/schemas/ShowSearch"
        - in: query
          name: pageSize
          description: Number of items on requested page
          schema:
            type: integer
            default: 10
        - in: query
          name: requestedPage
          description: Index of requested page (starts with 0)
          schema:
            type: integer
            default: 0
        - in: query
          name: sort
          schema:
            $ref: "#/components/schemas/Sort"
      responses:
        200:
          description: Successful retreival of articles
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ShowSearchResult"
        500:
          $ref: "#/components/responses/500-internal-error"
  /shows/{id}:
    get:
      tags:
        - shows
      summary: Retreives information of the show with the given ID.
      parameters:
        - $ref: "#/components/parameters/showId"
      security:
        - BearerAuth: []
      responses:
        200:
          description: Successful retreival of a show.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Show"
        401:
          $ref: "#/components/responses/401-not-authenticated"
        404:
          description: The show with the given ID was not found
        500:
          $ref: "#/components/responses/500-internal-error"
  /topShows:
    get:
      tags:
        - shows
      summary: Searches for shows that have the highest amount of tickets sold per category for a given month
      description: Searches for data depending on the query parameters. When no query parameters are given, all locations are returned
      security:
        - BearerAuth: []
      parameters:
        - name: search
          in: query
          schema:
            $ref: "#/components/schemas/TopShowSearch"
      responses:
        200:
          description: Successful retreival of locations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ShowWithTicketsSold"
        401:
          $ref: "#/components/responses/401-not-authenticated"
        500:
          $ref: "#/components/responses/500-internal-error"
  /locations:
    post:
      tags:
        - locations
      summary: Creates a location.
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LocationWithoutId"
      responses:
        201:
          description: Successful creation of a location
          headers:
            Location:
              required: true
              description: The location of the created resource
              schema:
                type: string
                format: uri
        401:
          $ref: "#/components/responses/401-not-authenticated"
        403:
          $ref: "#/components/responses/403-forbidden"
        422:
          description: Validation failed for an input
        500:
          $ref: "#/components/responses/500-internal-error"
    get:
      tags:
        - locations
      summary: Searches for locations depending on parameters
      description: Filters data depending on the query parameters. When no query parameters are given, all locations are returned
      parameters:
        - name: search
          in: query
          schema:
            $ref: "#/components/schemas/LocationSearch"
        - in: query
          name: pageSize
          description: Number of items on requested page
          schema:
            type: integer
            default: 10
        - in: query
          name: requestedPage
          description: Index of requested page (starts with 0)
          schema:
            type: integer
            default: 0
        - in: query
          name: sort
          schema:
            $ref: "#/components/schemas/Sort"
      responses:
        200:
          description: Successful retreival of locations
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LocationSearchResult"
        500:
          $ref: "#/components/responses/500-internal-error"
  /locations/{id}:
    get:
      tags:
        - locations
      summary: Gets the details of a location
      parameters:
        - $ref: "#/components/parameters/locationId"
      security:
        - BearerAuth: []
      responses:
        200:
          description: Successful retreival of the location
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Location"
        401:
          $ref: "#/components/responses/401-not-authenticated"
        404:
          description: The location with the given ID was not found
        500:
          $ref: "#/components/responses/500-internal-error"
  /locations/{id}/seatingPlans:
    get:
      tags:
        - locations
      summary: Gets the seating plans of a location
      security:
        - BearerAuth: []
      parameters:
        - $ref: "#/components/parameters/locationId"
      responses:
        200:
          description: Successful retreival of the location seating plans
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/SeatingPlan"
        401:
          $ref: "#/components/responses/401-not-authenticated"
        404:
          description: No seating plans of the given location were found
        500:
          $ref: "#/components/responses/500-internal-error"
  /artists:
    get:
      tags:
        - artists
      summary: Searches for artists depending on parameters
      description: Filters data depending on the query parameters. When no query parameters are given, all artists are returned
      parameters:
        - in: query
          name: search
          description: Finds artists that either have their first, last, band name or their alias containing the search string
          schema:
            type: string
        - in: query
          name: pageSize
          description: Number of items on requested page
          schema:
            type: integer
            default: 10
        - in: query
          name: requestedPage
          description: Index of requested page (starts with 0)
          schema:
            type: integer
            default: 0
        - in: query
          name: sort
          schema:
            $ref: "#/components/schemas/Sort"
      responses:
        200:
          description: Successful retreival of artists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ArtistsSearchResult"
        500:
          $ref: "#/components/responses/500-internal-error"
  /artists/{id}:
    get:
      tags:
        - artists
      summary: Retreives information of the artist with the given ID.
      parameters:
        - $ref: "#/components/parameters/artistId"
      security:
        - BearerAuth: []
      responses:
        200:
          description: Successful retreival of an artist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Artist"
        401:
          $ref: "#/components/responses/401-not-authenticated"
        404:
          description: The artist with the given ID was not found
        500:
          $ref: "#/components/responses/500-internal-error"
  /seatingPlans:
    post:
      tags:
        - seatingPlans
      summary: Creates a seating plan.
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SeatingPlanWithoutId"
      responses:
        201:
          description: Successful creation of a seating plan
          headers:
            Location:
              required: true
              description: The location of the created resource
              schema:
                type: string
                format: uri
        401:
          $ref: "#/components/responses/401-not-authenticated"
        403:
          $ref: "#/components/responses/403-forbidden"
        422:
          description: Validation failed for an input
        500:
          $ref: "#/components/responses/500-internal-error"
    get:
      tags:
        - seatingPlans
      summary: Gets all seating plans
      security:
        - BearerAuth: []
      responses:
        200:
          description: Successful retreival of seating plans
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/SeatingPlan"
        401:
          $ref: "#/components/responses/401-not-authenticated"
        500:
          $ref: "#/components/responses/500-internal-error"
  /seatingPlans/{id}:
    get:
      tags:
        - seatingPlans
      summary: Retreives information of the seating plan with the given ID.
      parameters:
        - $ref: "#/components/parameters/seatingPlanId"
      security:
        - BearerAuth: []
      responses:
        200:
          description: Successful retreival of a seating plan.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SeatingPlan"
        401:
          $ref: "#/components/responses/401-not-authenticated"
        404:
          description: The seating plan with the given ID was not found
        500:
          $ref: "#/components/responses/500-internal-error"
  /seatingPlans/{id}/sectors:
    get:
      tags:
        - seatingPlans
      summary: Gets all sectors of the seating plan with the given ID.
      parameters:
        - $ref: "#/components/parameters/seatingPlanId"
      security:
        - BearerAuth: []
      responses:
        200:
          description: Successful retreival of sectors of seating plan with the given ID.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Sector"
        401:
          $ref: "#/components/responses/401-not-authenticated"
        404:
          description: The seating plan with the given ID was not found or has no sectors
        500:
          $ref: "#/components/responses/500-internal-error"
  /showTickets/{id}:
    get:
      tags:
        - shows
      summary: Gets all tickets of a show with their corresponding booking status + hall plan + sectors
      security:
        - BearerAuth: []
      parameters:
        - $ref: "#/components/parameters/showId"
      responses:
        200:
          description: Successful retreival of the show information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ShowInformation"
        401:
          $ref: "#/components/responses/401-not-authenticated"
        404:
          description: The user with the given ID was not found
        500:
          $ref: "#/components/responses/500-internal-error"
  /tickets:
    post:
      tags:
        - tickets
      summary: Sets the given tickets to purchased or reserved
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TicketStatus"
      responses:
        201:
          description: Successful purchase of a ticket. Returns the purchased and reserved tickets with their ID.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FullTicketWithStatus"
        401:
          $ref: "#/components/responses/401-not-authenticated"
        422:
          description: Validation failed for an input
        500:
          $ref: "#/components/responses/500-internal-error"
  /ticketPrints/{id}:
    get:
      tags:
        - tickets
      summary: Retreives a ticket in PDF-format or the given Ticket ID.
      parameters:
        - $ref: "#/components/parameters/ticketId"
      security:
        - BearerAuth: []
      responses:
        200:
          description: Successful retreival of a ticket.
          content:
            application/pdf:
              schema:
                type: string
                format: binary
        401:
          $ref: "#/components/responses/401-not-authenticated"
        403:
          $ref: "#/components/responses/403-forbidden"
        404:
          description: The ticket with the given ID was not found
        500:
          $ref: "#/components/responses/500-internal-error"
  /ticketCancellations:
    post:
      tags:
        - tickets
      summary: Cancels the given tickets purchased or reserved status
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TicketStatus"
      responses:
        201:
          description: Successful cancellation of a ticket. Returns the id of the cancelled tickets
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TicketStatus"
        401:
          $ref: "#/components/responses/401-not-authenticated"
        409:
          description: Tickets can only be cancelled for the own user
        422:
          description: Validation failed for an input
        500:
          $ref: "#/components/responses/500-internal-error"
  /orders:
    get:
      tags:
        - tickets
      summary: Shows orders for the user possessing the token
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: pageSize
          description: Number of items on requested page
          schema:
            type: integer
            default: 10
        - in: query
          name: requestedPage
          description: Index of requested page (starts with 0)
          schema:
            type: integer
            default: 0
      responses:
        200:
          description: Successful retreival of orders
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrdersPage"
        401:
          $ref: "#/components/responses/401-not-authenticated"
        403:
          $ref: "#/components/responses/403-forbidden"
        404:
          description: The user with the given token was not found
        500:
          $ref: "#/components/responses/500-internal-error"
  /bills/{id}:
    get:
      tags:
        - tickets
      summary: Gets a PDF version of a bill
      security:
        - BearerAuth: []
      parameters:
        - $ref: "#/components/parameters/transactionId"
      responses:
        200:
          description: Successful retreival of orders
          content:
            application/pdf:
              schema:
                type: string
                format: binary
        401:
          $ref: "#/components/responses/401-not-authenticated"
        403:
          $ref: "#/components/responses/403-forbidden"
        404:
          description: The given transaction id was not found
        500:
          $ref: "#/components/responses/500-internal-error"
  /ticketInfo:
    get:
      tags:
        - tickets
      summary: Gets all future tickets of user possessing the token
      security:
        - BearerAuth: []
      responses:
        200:
          description: Successful retreival of tickets
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TicketWithShowInfo"
        401:
          $ref: "#/components/responses/401-not-authenticated"
        403:
          $ref: "#/components/responses/403-forbidden"
        404:
          description: The user with the given token was not found
        500:
          $ref: "#/components/responses/500-internal-error"
components:
  parameters:
    userId:
      name: id
      in: path
      description: ID of the user that is retreived
      required: true
      schema:
        type: integer
    articleId:
      name: id
      in: path
      description: ID of the user that is retreived
      required: true
      schema:
        type: integer
    artistId:
      name: id
      in: path
      description: ID of the artist that is retreived
      required: true
      schema:
        type: integer
        format: int64
    eventId:
      name: id
      in: path
      description: ID of the event that is retreived
      required: true
      schema:
        type: integer
        format: int64
    showId:
      name: id
      in: path
      description: ID of the show that is retreived
      required: true
      schema:
        type: integer
        format: int64
    locationId:
      name: id
      in: path
      description: ID of the location that is retreived
      required: true
      schema:
        type: integer
        format: int64
    transactionId:
      name: id
      in: path
      description: ID of the transaction that is retreived
      required: true
      schema:
        type: integer
        format: int64
    ticketId:
      name: id
      in: path
      description: ID of the ticket that is retreived
      required: true
      schema:
        type: integer
        format: int64
    seatingPlanId:
      name: id
      in: path
      description: ID of the seating plan layout that is retreived
      required: true
      schema:
        type: integer
        format: int64
    seatingPlanLayoutId:
      name: id
      in: path
      description: ID of the seating plan layout that is retreived
      required: true
      schema:
        type: integer
        format: int64
    imageId:
      name: id
      in: path
      description: ID of the image that is retreived
      required: true
      schema:
        type: integer
    filterLocked:
      name: filterLocked
      in: query
      description: Only return locked users if this is set to true
      required: false
      schema:
        type: boolean
    filterRead:
      name: filterRead
      in: query
      description: Only return read articles if this is set to true
      required: false
      schema:
        type: boolean
  responses:
    500-internal-error:
      description: Internal Server Error
    401-not-authenticated:
      description: The user is not logged in
    403-forbidden:
      description: The user needs administrative rights
    404-not-found:
      description: Could not find resource
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
  schemas:
    Sort:
      type: string
      default: ASC
      enum:
        - ASC
        - DESC
    Gender:
      type: string
      enum:
        - male
        - female
        - other
    BookingType:
      type: string
      enum:
        - purchase
        - cancellation
        - reservation
        - dereservation
    Category:
      type: string
      enum:
        - Classical
        - Country
        - EDM
        - Jazz
        - Oldies
        - Pop
        - Rap
        - RnB
        - Rock
        - Techno
    User:
      type: object
      properties:
        userId:
          type: integer
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        gender:
          $ref: "#/components/schemas/Gender"
        address:
          $ref: "#/components/schemas/Address"
        lockedAccount:
          type: boolean
      required:
        - userId
        - firstName
        - lastName
        - email
        - gender
        - address
        - lockedAccount
    UserWithPassword:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        gender:
          $ref: "#/components/schemas/Gender"
        address:
          $ref: "#/components/schemas/Address"
        password:
          type: string
      required:
        - firstName
        - lastName
        - email
        - gender
        - address
        - password
    EventWithoutId:
      type: object
      properties:
        name:
          type: string
        duration:
          type: number
        category:
          $ref: "#/components/schemas/Category"
        content:
          type: string
      required:
        - name
    Event:
      type: object
      properties:
        eventId:
          type: integer
          format: int64
        name:
          type: string
        duration:
          type: number
        category:
          $ref: "#/components/schemas/Category"
        content:
          type: string
      required:
        - eventId
        - name
    Show:
      type: object
      properties:
        showId:
          type: integer
          format: int64
        date:
          type: string
          format: date-time
        event:
          $ref: "#/components/schemas/Event"
        artists:
          type: array
          items:
            type: integer
        location:
          $ref: "#/components/schemas/Location"
      required:
        - showId
        - event
        - artists
        - location
    ShowWithoutId:
      type: object
      properties:
        date:
          type: string
          format: date-time
        event:
          type: integer
        artists:
          type: array
          items:
            type: integer
        seatingPlan:
          type: integer
        sectorPrices:
          type: array
          items:
            $ref: "#/components/schemas/SectorPrice"
      required:
        - date
        - event
        - artists
        - seatingPlan
        - sectorPrices
    ShowWithTicketsSold:
      type: object
      properties:
        showId:
          type: integer
        date:
          type: string
          format: date-time
        event:
          type: integer
        ticketsSold:
          type: integer
        artists:
          type: array
          items:
            type: number
      required:
        - showId
        - date
        - event
        - ticketsSold
        - artists
    Article:
      type: object
      properties:
        articleId:
          type: integer
        title:
          type: string
        creationDate:
          type: string
          format: date-time
        summary:
          type: string
        text:
          type: string
        images:
          type: array
          items:
            type: integer
      required:
        - articleId
        - title
        - creationDate
        - images
    ArticleWithoutId:
      type: object
      properties:
        title:
          type: string
        summary:
          type: string
        text:
          type: string
        images:
          type: array
          items:
            type: integer
      required:
        - title
        - images
        - summary
        - text
    Location:
      type: object
      properties:
        locationId:
          type: integer
          format: int64
        name:
          type: string
        address:
          $ref: "#/components/schemas/Address"
      required:
        - locationId
        - name
        - address
    LocationWithoutId:
      type: object
      properties:
        name:
          type: string
        address:
          $ref: "#/components/schemas/Address"
      required:
        - name
        - address
    Artist:
      type: object
      properties:
        artistId:
          type: integer
        bandName:
          type: string
        knownAs:
          type: string
        firstName:
          type: string
        lastName:
          type: string
      required:
        - artistId
    SeatingPlanWithoutId:
      type: object
      properties:
        name:
          type: string
        seatingPlanLayout:
          $ref: "#/components/schemas/SeatingPlanLayout"
        locationId:
          type: integer
          format: int64
        sectors:
          type: array
          items:
            $ref: "#/components/schemas/ProvisionalSector"
        seats:
          type: array
          items:
            $ref: "#/components/schemas/Seat"
      required:
        - name
        - seatingPlanLayout
        - locationId
        - sectors
        - seats
    SeatingPlan:
      type: object
      properties:
        seatingPlanId:
          type: integer
          format: int64
        name:
          type: string
        seatingPlanLayoutId:
          type: integer
          format: int64
        locationId:
          type: integer
          format: int64
      required:
        - seatingPlanId
        - name
        - seatingPlanLayoutId
        - locationId
    Ticket:
      type: object
      properties:
        ticketId:
          type: integer
          format: int64
        rowNumber:
          type: integer
          format: int64
        seatNumber:
          type: integer
          format: int64
        sector:
          type: integer
          format: int64
      required:
        - ticketId
        - sector
    Seat:
      type: object
      properties:
        id:
          type: integer
          format: int64
        rowNumber:
          type: integer
          format: int64
        seatNumber:
          type: integer
          format: int64
        sector:
          type: integer
          format: int64
      required:
        - id
        - sector
    SeatWithBookingStatus:
      type: object
      properties:
        seatId:
          type: integer
          format: int64
        ticketId:
          type: integer
          format: int64
        reserved:
          type: boolean
        purchased:
          type: boolean
        rowNumber:
          type: integer
          format: int64
        seatNumber:
          type: integer
          format: int64
        sector:
          type: integer
          format: int64
      required:
        - seatId
        - reserved
        - purchased
        - ticketId
        - sector
    ProvisionalSector:
      type: object
      properties:
        id:
          type: integer
          format: int64
      required:
        - id
    Sector:
      type: object
      properties:
        sectorId:
          type: integer
          format: int64
        price:
          type: number
      required:
        - sectorId
        - price
    Transaction:
      type: object
      properties:
        transactionId:
          type: integer
        date:
          type: string
          format: date-time
        invoiceItems:
          type: array
          items:
            $ref: "#/components/schemas/InvoiceItem"
      required:
        - transactionId
        - date
        - invoiceItems
    InvoiceItem:
      type: object
      properties:
        priceAtBookingTime:
          type: number
        type:
          $ref: "#/components/schemas/BookingType"
        ticket:
          $ref: "#/components/schemas/Ticket"
      required:
        - priceAtBookingTime
        - type
        - ticket
    AuthRequest:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
      required:
        - email
        - password
    EventSearch:
      type: object
      properties:
        name:
          type: string        
        content:
          type: string
        category:
          $ref: "#/components/schemas/Category"
        duration:
          type: integer
        location:
          type: integer
        artist:
          type: integer

    TopShowSearch:
      type: object
      properties:
        category:
          $ref: "#/components/schemas/Category"
        month:
          type: string
          format: date
      required:
        - category
        - month
    ShowSearch:
      type: object
      properties:
        event:
          type: string
        date:
          type: string
          format: date-time
        price:
          type: number
        seatingPlan:
          type: integer
          format: int64
        location:
          type: integer
          format: int64
        eventId:
          type: integer
          format: int64
    LocationSearch:
      type: object
      properties:
        name:
          description: Finds locations that contains the given string in their name
          type: string
        street:
          description: Finds locations that contains the given string in their street
          type: string
        city:
          description: Finds locations that contains the given string in their city
          type: string
        country:
          description: Finds locations that contains the given string in their country
          type: string
        zipCode:
          description: Finds locations that contains the given string in their zipCode
          type: string
    TicketStatus:
      type: object
      properties:
        reserved:
          type: array
          items:
            type: integer
            format: int64
        purchased:
          type: array
          items:
            type: integer
            format: int64
      required:
        - reserved
        - purchased
    FullTicketWithStatus:
      type: object
      properties:
        reserved:
          type: array
          items:
            $ref: "#/components/schemas/Ticket"
        purchased:
          type: array
          items:
            $ref: "#/components/schemas/Ticket"
      required:
        - reserved
        - purchased
    ShowInformation:
      type: object
      properties:
        seats:
          type: array
          items:
            $ref: "#/components/schemas/SeatWithBookingStatus"
        sectors:
          type: array
          items:
            $ref: "#/components/schemas/Sector"
        seatingPlan:
          $ref: "#/components/schemas/SeatingPlan"
      required:
        - seats
        - sectors
        - seatingPlan
    Address:
      type: object
      properties:
        houseNumber:
          type: string
        street:
          type: string
        city:
          type: string
        country:
          type: string
        zipCode:
          type: string
      required:
        - houseNumber
        - street
        - city
        - country
        - zipCode
    Order:
      type: object
      properties:
        type:
          $ref: "#/components/schemas/BookingType"
        transactionDate:
          type: string
          format: date-time
        showDate:
          type: string
          format: date-time
        artists:
          type: array
          items:
            type: string
        eventName:
          type: string
        city:
          type: string
        locationName:
          type: string
        transactionId:
          type: integer
          format: int64
        ticketIds:
          type: array
          items:
            type: integer
            format: int64
      required:
        - type
        - date
        - artists
        - eventName
        - city
        - locationName
        - transactionId
        - ticketIds
    TicketWithShowInfo:
      type: object
      properties:
        ticket:
          type: array
          items:
            $ref: "#/components/schemas/Ticket"
        type:
          type: string
          enum:
            - purchased
            - reserved
        showDate:
          type: string
          format: date-time
        artists:
          type: array
          items:
            type: string
        eventName:
          type: string
        city:
          type: string
        locationName:
          type: string
      required:
        - ticket
        - type
        - showDate
        - artists
        - eventName
        - city
        - locationName
    SectorPrice:
      type: object
      properties:
        sectorId:
          type: integer
          format: int64
        price:
          type: number
          format: float
      required:
        - sectorId
        - price
    ArtistsSearchResult:
      type: object
      properties:
        artists:
          type: array
          items:
            $ref: "#/components/schemas/Artist"
        currentPage:
          type: integer
        numberOfResults:
          type: integer
        pagesTotal:
          type: integer
    LocationSearchResult:
      type: object
      properties:
        locations:
          type: array
          items:
            $ref: "#/components/schemas/Location"
        currentPage:
          type: integer
        numberOfResults:
          type: integer
        pagesTotal:
          type: integer
    EventSearchResult:
      type: object
      properties:
        events:
          type: array
          items:
            $ref: "#/components/schemas/Event"
        currentPage:
          type: integer
        numberOfResults:
          type: integer
        pagesTotal:
          type: integer
    ShowSearchResult:
      type: object
      properties:
        shows:
          type: array
          items:
            $ref: "#/components/schemas/Show"
        currentPage:
          type: integer
        numberOfResults:
          type: integer
        pagesTotal:
          type: integer
    UsersPage:
      type: object
      properties:
        users:
          type: array
          items:
            $ref: "#/components/schemas/User"
        currentPage:
          type: integer
        numberOfResults:
          type: integer
        pagesTotal:
          type: integer
    ElementLocation:
      type: object
      properties:
        w:
          type: number
        h:
          type: number
        x:
          type: number
        y:
          type: number
      required:
        - x
        - y
        - w
        - h
    SeatingPlanSeat:
      type: object
      properties:
        id:
          type: integer
          format: int64
        sectorId:
          type: integer
          format: int64
        location:
          $ref: "#/components/schemas/ElementLocation"
      required:
        - id
        - sectorId
    SeatingPlanSector:
      type: object
      properties:
        id:
          type: integer
          format: int64
        color:
          type: integer
          format: int64
        description:
          type: string
        noSeats:
          type: boolean
        location:
          $ref: "#/components/schemas/ElementLocation"
      required:
        - id
        - sectorId
        - color
        - noSeats
    SeatingPlanStaticElement:
      type: object
      properties:
        id:
          type: integer
          format: int64
        color:
          type: integer
          format: int64
        description:
          type: string
        location:
          $ref: "#/components/schemas/ElementLocation"
      required:
        - id
        - sectorId
        - color
        - location
    SeatingPlanLayout:
      type: object
      properties:
        general:
          type: object
          properties:
            width:
              type: number
            height:
              type: number
          required:
            - width
            - height
        seats:
          type: array
          items:
            $ref: "#/components/schemas/SeatingPlanSeat"
        sectors:
          type: array
          items:
            $ref: "#/components/schemas/SeatingPlanSector"
        staticElements:
          type: array
          items:
            $ref: "#/components/schemas/SeatingPlanStaticElement"
      required:
        - general
        - seats
        - sectors
        - staticElements
    OrdersPage:
      type: object
      properties:
        orders:
          type: array
          items:
            $ref: "#/components/schemas/Order"
        currentPage:
          type: integer
        numberOfResults:
          type: integer
        pagesTotal:
          type: integer
    PasswordReset:
      type: object
      properties:
        email:
          type: string
        clientURI:
          type: string          
      required:
        - email
        - clientURI
    PasswordUpdate:
      type: object
      properties:
        newPassword:
          type: string
        token:
          type: string
      required:
        - newPassword
        - token

