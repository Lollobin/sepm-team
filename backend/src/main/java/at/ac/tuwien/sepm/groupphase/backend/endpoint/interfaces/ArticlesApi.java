/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.4.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package at.ac.tuwien.sepm.groupphase.backend.endpoint.interfaces;

import at.ac.tuwien.sepm.groupphase.backend.endpoint.dto.ArticleDto;
import at.ac.tuwien.sepm.groupphase.backend.endpoint.dto.ArticlePageDto;
import at.ac.tuwien.sepm.groupphase.backend.endpoint.dto.ArticleWithoutIdDto;
import at.ac.tuwien.sepm.groupphase.backend.endpoint.dto.SortDto;
import java.net.URI;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
@Validated
@Tag(name = "articles", description = "the articles API")
public interface ArticlesApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /articles : Gets news articles
     *
     * @param filterRead Only return read articles if this is set to true (optional)
     * @param pageSize Number of items on requested page (optional, default to 10)
     * @param requestedPage Index of requested page (starts with 0) (optional, default to 0)
     * @param sort  (optional, default to ASC)
     * @return Successful retrieval of articles (status code 200)
     *         or The user is not logged in (status code 401)
     *         or Internal Server Error (status code 500)
     */
    @Operation(
        operationId = "articlesGet",
        summary = "Gets news articles",
        tags = { "articles" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful retrieval of articles", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  ArticlePageDto.class))),
            @ApiResponse(responseCode = "401", description = "The user is not logged in"),
            @ApiResponse(responseCode = "500", description = "Internal Server Error")
        },
        security = {
            @SecurityRequirement(name = "BearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/articles",
        produces = { "application/json" }
    )
    default ResponseEntity<ArticlePageDto> articlesGet(
        @Parameter(name = "filterRead", description = "Only return read articles if this is set to true", schema = @Schema(description = "")) @Valid @RequestParam(value = "filterRead", required = false) Boolean filterRead,
        @Parameter(name = "pageSize", description = "Number of items on requested page", schema = @Schema(description = "", defaultValue = "10")) @Valid @RequestParam(value = "pageSize", required = false, defaultValue = "10") Integer pageSize,
        @Parameter(name = "requestedPage", description = "Index of requested page (starts with 0)", schema = @Schema(description = "", defaultValue = "0")) @Valid @RequestParam(value = "requestedPage", required = false, defaultValue = "0") Integer requestedPage,
        @Parameter(name = "sort", description = "", schema = @Schema(description = "", allowableValues = { "ASC", "DESC" }, defaultValue = "ASC")) @Valid @RequestParam(value = "sort", required = false, defaultValue = "ASC") SortDto sort
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"currentPage\" : 1, \"articles\" : [ { \"summary\" : \"summary\", \"images\" : [ 6, 6 ], \"articleId\" : 0, \"text\" : \"text\", \"title\" : \"title\", \"creationDate\" : \"2000-01-23T04:56:07.000+00:00\" }, { \"summary\" : \"summary\", \"images\" : [ 6, 6 ], \"articleId\" : 0, \"text\" : \"text\", \"title\" : \"title\", \"creationDate\" : \"2000-01-23T04:56:07.000+00:00\" } ], \"numberOfResults\" : 5, \"pagesTotal\" : 5 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /articles/{id} : Gets the details of a news article
     *
     * @param id ID of the user that is retreived (required)
     * @return Successful retreival of the article (status code 200)
     *         or The user is not logged in (status code 401)
     *         or The article with the given ID was not found (status code 404)
     *         or Internal Server Error (status code 500)
     */
    @Operation(
        operationId = "articlesIdGet",
        summary = "Gets the details of a news article",
        tags = { "articles" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful retreival of the article", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  ArticleDto.class))),
            @ApiResponse(responseCode = "401", description = "The user is not logged in"),
            @ApiResponse(responseCode = "404", description = "The article with the given ID was not found"),
            @ApiResponse(responseCode = "500", description = "Internal Server Error")
        },
        security = {
            @SecurityRequirement(name = "BearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/articles/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<ArticleDto> articlesIdGet(
        @Parameter(name = "id", description = "ID of the user that is retreived", required = true, schema = @Schema(description = "")) @PathVariable("id") Long id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"summary\" : \"summary\", \"images\" : [ 6, 6 ], \"articleId\" : 0, \"text\" : \"text\", \"title\" : \"title\", \"creationDate\" : \"2000-01-23T04:56:07.000+00:00\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /articles : Creates a news article
     * Only admins can create new news articles
     *
     * @param articleWithoutIdDto  (required)
     * @return Successful creation of an article (status code 201)
     *         or The user is not logged in (status code 401)
     *         or The user needs administrative rights (status code 403)
     *         or Validation failed for an input (status code 422)
     *         or Internal Server Error (status code 500)
     */
    @Operation(
        operationId = "articlesPost",
        summary = "Creates a news article",
        tags = { "articles" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Successful creation of an article"),
            @ApiResponse(responseCode = "401", description = "The user is not logged in"),
            @ApiResponse(responseCode = "403", description = "The user needs administrative rights"),
            @ApiResponse(responseCode = "422", description = "Validation failed for an input"),
            @ApiResponse(responseCode = "500", description = "Internal Server Error")
        },
        security = {
            @SecurityRequirement(name = "BearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/articles",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> articlesPost(
        @Parameter(name = "ArticleWithoutIdDto", description = "", required = true, schema = @Schema(description = "")) @Valid @RequestBody ArticleWithoutIdDto articleWithoutIdDto
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
